High Performance Go
Techx 2018üè¥
09 Aug 2018

Athavan Kanapuli
athavan@exotel.in

* Agenda

Today we're going to take a look at techniques for writing high performance Go applications.

We're going to focus on three areas in this presentation:

- Benchmarking
- Performance measurement and profiling
- Memory management and GC

The goal is to give you, the audience, the tools you need to measure and improve the performance of your Go applications.

* Benchmarking

* Benchmarking

Before you can begin to tune your application, you need to establish a reliable baseline to measure the impact of your change to know if you're making things better, or worse.

In other words, _"Don't_guess,_measure"_

This section focuses on how to construct useful benchmarks using the Go testing framework, and gives practical tips for avoiding the pitfalls.


* Benchmarking ground rules

Before you benchmark, you must have a stable environment to get repeatable results.

- The machine must be idle‚Äîdon't profile on shared hardware, don't browse the web while waiting for a long benchmark to run.
- Watch out for power saving and thermal scaling.
- Avoid virtual machines and shared cloud hosting; they are too noisy for consistent measurements.

* Go's Test Package

The testing package has built-in support for benchmarking  

.code examples/factorial/factorial_test.go /STARTFAC OMIT/,/ENDFAC OMIT/
.caption factorial.go

.code examples/factorial/factorial_test.go /STARTBEN OMIT/,/ENDBEN OMIT/
.caption factorial_benchmark.go

DEMO: go test -bench=. 

